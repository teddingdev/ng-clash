{"version":3,"file":"src_app_features_clash-proxy_clash-proxy_module_ts.js","mappings":"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","sources":["./src/app/features/clash-proxy/clash-proxy-routing.module.ts","./src/app/features/clash-proxy/clash-proxy.component.ts","./src/app/features/clash-proxy/clash-proxy.component.html","./src/app/features/clash-proxy/clash-proxy.module.ts","./src/app/features/clash-proxy/components/proxy-card/proxy-card.component.ts","./src/app/features/clash-proxy/components/proxy-card/proxy-card.component.html","./src/app/features/clash-proxy/components/proxy-group/proxy-group.component.ts","./src/app/features/clash-proxy/components/proxy-group/proxy-group.component.html","./src/app/services/feature/clash.service.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ClashProxyComponent } from './clash-proxy.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ClashProxyComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ClashProxyRoutingModule {}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ClashApiService } from '@service';\nimport { PolicyGroup, ProxiesProvider, Proxy } from '@model';\nimport { ClashService } from 'src/app/services/feature/clash.service';\nimport { Observable, Subject, catchError, map, of, takeUntil, tap } from 'rxjs';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\ntype ViewModel = 'grid_view' | 'view_list';\n\n@Component({\n  selector: 'app-clash-proxy',\n  templateUrl: './clash-proxy.component.html',\n  styleUrls: ['./clash-proxy.component.scss'],\n  // changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ClashProxyComponent implements OnInit, OnDestroy {\n  providers$: Observable<Record<string, ProxiesProvider> | null>;\n  global$: Observable<(Proxy | PolicyGroup)[] | null>;\n  proxies$: Observable<Proxy[] | null>;\n  policyGroups$: Observable<PolicyGroup[] | null>;\n\n  viewModel: ViewModel = 'grid_view';\n\n  /** 用于取消订阅 */\n  stop$ = new Subject();\n\n  toggleViewModel(viewModel: ViewModel) {\n    switch (viewModel) {\n      case 'grid_view':\n        this.viewModel = 'view_list';\n        break;\n      case 'view_list':\n        this.viewModel = 'grid_view';\n        break;\n      default:\n        this.viewModel = 'grid_view';\n        break;\n    }\n  }\n\n  putProxy(data: { proxyName: string; policyName: string }) {\n    const { proxyName, policyName } = data;\n    this.clashService.putProxy(proxyName, policyName).subscribe((res) => {\n      if (res === null) {\n        this._snackBar.open('success', 'close', {\n          duration: 3000,\n        });\n      } else if (res === void 0) {\n        this._snackBar.open('error', 'close', {\n          duration: 3000,\n        });\n      }\n      this.clashService.fetch(new Date().toString());\n    });\n  }\n\n  ngOnInit(): void {}\n\n  ngOnDestroy(): void {\n    this.stop$.next('stop');\n  }\n\n  constructor(\n    private _snackBar: MatSnackBar,\n    // private ref: ChangeDetectorRef,\n    private clashService: ClashService\n  ) {\n    this.proxies$ = this.clashService.proxies$.pipe(\n      map((data) => data.proxies),\n      catchError(() => {\n        return of([]);\n      })\n    );\n    this.global$ = this.clashService.proxies$.pipe(\n      map((data) => data.global),\n      catchError(() => {\n        return of([]);\n      })\n    );\n    this.policyGroups$ = this.clashService.proxies$.pipe(\n      map((data) => data.policyGroups),\n      catchError(() => {\n        return of([]);\n      })\n    );\n    this.providers$ = this.clashService.fetchProviders();\n  }\n}\n","<div class=\"container\">\n  <div class=\"head\">策略组</div>\n  <app-proxy-group [policyGroups]=\"policyGroups$ | async\" (onPutProxy)=\"putProxy($event)\">\n  </app-proxy-group>\n\n  <div class=\"head\">\n    <div class=\"head-left\">代理</div>\n    <div class=\"head-rigt\">\n      <span class=\"view-model-icon\" (click)=\"toggleViewModel(viewModel)\">\n        <mat-icon matListItemIcon>{{ viewModel }}</mat-icon>\n      </span>\n    </div>\n  </div>\n  <app-proxy-card [proxies]=\"proxies$ | async\" [viewModel]=\"viewModel\"></app-proxy-card>\n</div>\n","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ClashProxyComponent } from './clash-proxy.component';\n\nimport { CoreModule } from 'src/app/core/core.module';\nimport { ClashProxyRoutingModule } from './clash-proxy-routing.module';\nimport { MaterialModule } from 'src/app/shared/material/material.module';\nimport { ProxyGroupComponent } from './components/proxy-group/proxy-group.component';\nimport { ProxyCardComponent } from './components/proxy-card/proxy-card.component';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [ClashProxyComponent, ProxyGroupComponent, ProxyCardComponent],\n  imports: [\n    CommonModule,\n    ClashProxyRoutingModule,\n    MaterialModule,\n    CoreModule,\n    FormsModule,\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class ClashProxyModule {}\n","import { Component, Input } from '@angular/core';\nimport { Proxy } from '@model';\n\ntype ViewModel = 'grid_view' | 'view_list';\n\n@Component({\n  selector: 'app-proxy-card',\n  templateUrl: './proxy-card.component.html',\n  styleUrls: ['./proxy-card.component.scss'],\n})\nexport class ProxyCardComponent {\n  @Input() proxies: Proxy[] | null = null;\n  @Input() viewModel: ViewModel = 'grid_view';\n}\n","<div class=\"proxy-card-wrap\" matRipple>\n  <div class=\"proxy-card\" [ngClass]=\"{'proxy-card-list':viewModel === 'view_list'}\" *ngFor=\"let proxy of proxies\">\n    <mat-card>\n      <mat-card-header>\n        <mat-card-title>{{proxy.type}}</mat-card-title>\n        <mat-card-subtitle>{{proxy.name}}</mat-card-subtitle>\n      </mat-card-header>\n      <mat-card-actions align=\"end\">\n        <!-- <button mat-button>LIKE</button>\n        <button mat-button>SHARE</button> -->\n      </mat-card-actions>\n    </mat-card>\n  </div>\n</div>\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport { MatAccordion } from '@angular/material/expansion';\nimport { PolicyGroup } from '@model';\n\n@Component({\n  selector: 'app-proxy-group',\n  templateUrl: './proxy-group.component.html',\n  styleUrls: ['./proxy-group.component.scss'],\n})\nexport class ProxyGroupComponent {\n  @ViewChild(MatAccordion) accordion?: MatAccordion;\n  @Input() policyGroups: PolicyGroup[] | null = null;\n\n  @Output() onPutProxy = new EventEmitter<{\n    policyName: string;\n    proxyName: string;\n  }>();\n\n  handlePutProxy(policyName: string, proxyName: string) {\n    this.onPutProxy.emit({\n      policyName,\n      proxyName,\n    });\n  }\n}\n","<ng-content></ng-content>\n<div mat-accordion multi>\n  <mat-expansion-panel *ngFor=\"let policyGroup of policyGroups;let i = index\" #panel>\n    <mat-expansion-panel-header>\n      <mat-panel-title class=\"title\">\n        <div class=\"policy-badge\">\n          <div>{{ policyGroup.all.length }}</div>\n        </div>\n        <div class=\"policy-name\">{{ policyGroup.name }}</div>\n      </mat-panel-title>\n      <mat-panel-description>\n        <div class=\"policy-type\">[ {{ policyGroup.type }} ]</div>\n        <div class=\"separator\">&rarr;</div>\n        <div class=\"selected\">\n          <mat-chip-option selected [selectable]=\"false\" [disabled]=\"panel.expanded\">\n            {{ policyGroup.now }}\n          </mat-chip-option>\n        </div>\n      </mat-panel-description>\n    </mat-expansion-panel-header>\n    <mat-chip-listbox>\n      <mat-chip-option *ngFor=\"let proxyName of policyGroup.all\" (click)=\"handlePutProxy(policyGroup.name,proxyName)\"\n                       [selected]=\"proxyName === policyGroup.now\" [selectable]=\"false\">\n        {{ proxyName }}\n      </mat-chip-option>\n    </mat-chip-listbox>\n  </mat-expansion-panel>\n</div>\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, map, Observable, shareReplay, Subject, switchMap } from 'rxjs';\n\nimport { ClashApiService } from '../api/clash-api.service';\n\nimport { PolicyGroup, PolicyGroupType, ProxyProviders, ProxyType, Proxy } from '@model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ClashService {\n  proxies$: Observable<{\n    proxies: Proxy[];\n    policyGroups: PolicyGroup[];\n    global: (Proxy | PolicyGroup)[];\n  }>;\n\n  providers$ = new Subject<ProxyProviders>();\n\n  private fetchAction$ = new BehaviorSubject<string>(new Date().toString());\n\n  /**\n   * @param timestamp 时间戳\n   */\n  fetch(timestamp: string) {\n    // ^?\n    this.fetchAction$.next(timestamp);\n  }\n\n  fetchProviders() {\n    return this.clashApiService.fetchProvideMap().pipe(map((res) => res.providers));\n  }\n\n  putProxy(proxyName: string, policyName: string) {\n    return this.clashApiService.putProxy(proxyName, policyName);\n  }\n\n  constructor(private clashApiService: ClashApiService) {\n    this.proxies$ = this.fetchAction$.pipe(\n      switchMap(() => {\n        return this.clashApiService.fetchProxyMap().pipe(\n          map((res) => res.proxies),\n          map((list) => {\n            const proxies = Object.values(list).filter((p) =>\n              Object.values(ProxyType).find((q) => q === p.type)\n            ) as Proxy[];\n            const policyGroups = Object.values(list).filter((p) =>\n              Object.values(PolicyGroupType).find((q) => q === p.type)\n            ) as PolicyGroup[];\n            const global = Object.values(list).filter((p) => p.name === 'GLOBAL');\n            return { proxies, policyGroups, global };\n          })\n        );\n      }),\n      shareReplay(1)\n    );\n  }\n}\n"],"names":["RouterModule","ClashProxyComponent","routes","path","component","ClashProxyRoutingModule","_","_2","_3","forChild","imports","i1","exports","Subject","catchError","map","of","toggleViewModel","viewModel","putProxy","data","proxyName","policyName","clashService","subscribe","res","_snackBar","open","duration","fetch","Date","toString","ngOnInit","ngOnDestroy","stop$","next","constructor","proxies$","pipe","proxies","global$","global","policyGroups$","policyGroups","providers$","fetchProviders","i0","ɵɵdirectiveInject","MatSnackBar","i2","ClashService","selectors","decls","vars","consts","template","ClashProxyComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","ClashProxyComponent_Template_app_proxy_group_onPutProxy_3_listener","$event","ClashProxyComponent_Template_span_click_9_listener","ɵɵelement","ɵɵadvance","ɵɵproperty","ɵɵpipeBind1","ɵɵtextInterpolate","CommonModule","CoreModule","MaterialModule","ProxyGroupComponent","ProxyCardComponent","FormsModule","ClashProxyModule","declarations","ɵɵpureFunction1","_c0","ctx_r0","proxy_r1","type","name","inputs","ProxyCardComponent_Template","ɵɵtemplate","ProxyCardComponent_div_1_Template","EventEmitter","MatAccordion","ProxyGroupComponent_mat_expansion_panel_2_mat_chip_option_18_Template_mat_chip_option_click_0_listener","restoredCtx","ɵɵrestoreView","_r8","proxyName_r5","$implicit","policyGroup_r1","ɵɵnextContext","ctx_r6","ɵɵresetView","handlePutProxy","now","ɵɵtextInterpolate1","ProxyGroupComponent_mat_expansion_panel_2_mat_chip_option_18_Template","all","length","_r3","expanded","onPutProxy","emit","viewQuery","ProxyGroupComponent_Query","ɵɵprojection","ProxyGroupComponent_mat_expansion_panel_2_Template","BehaviorSubject","shareReplay","switchMap","PolicyGroupType","ProxyType","timestamp","fetchAction$","clashApiService","fetchProvideMap","providers","fetchProxyMap","list","Object","values","filter","p","find","q","ɵɵinject","ClashApiService","factory","ɵfac","providedIn"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}