{"version":3,"file":"common.js","mappings":";;;;;;;;;;;;;;;;;;AAI2C;;;;AAKrC,MAAOE,eAAe;EAC1B,IAAYC,QAAQ;IAClB,OAAO,IAAI,CAACC,WAAW,CAACD,QAAQ;EAClC;EAEAE,aAAa;IACX,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACH,QAAQ,UAAU;IACtC,OAAO,IAAI,CAACI,IAAI,CAACC,GAAG,CAAUF,GAAG,CAAC,CAACG,IAAI,CACrCT,gDAAU,CAAEU,KAAwB,IAAI;MACtCC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClB,OAAO,EAAE;IACX,CAAC,CAAC,CACH;EACH;EAEAG,eAAe;IACb,MAAMP,GAAG,GAAG,GAAG,IAAI,CAACH,QAAQ,oBAAoB;IAChD,OAAO,IAAI,CAACI,IAAI,CAACC,GAAG,CAAiBF,GAAG,CAAC;EAC3C;EAEAQ,QAAQ,CAACC,SAAiB,EAAEC,UAAkB;IAC5C,MAAMV,GAAG,GAAG,GAAG,IAAI,CAACH,QAAQ,YAAYa,UAAU,EAAE;IACpD,OAAO,IAAI,CAACT,IAAI,CAACU,GAAG,CAAOX,GAAG,EAAE;MAAEY,IAAI,EAAEH;IAAS,CAAE,CAAC,CAACN,IAAI,CACvDT,gDAAU,CAAEU,KAAwB,IAAI;MACtCC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClB,OAAOT,wCAAE,CAACkB,SAAS,CAAC;IACtB,CAAC,CAAC,CACH;EACH;EAEAC,WAAW;IACT,MAAMd,GAAG,GAAG,GAAG,IAAI,CAACH,QAAQ,UAAU;IACtC,OAAO,IAAI,CAACI,IAAI,CAACC,GAAG,CAASF,GAAG,CAAC;EACnC;EAEAe,SAAS,CAACC,IAAqB;IAC7B,MAAMhB,GAAG,GAAG,GAAG,IAAI,CAACH,QAAQ,UAAU;IACtC,OAAO,IAAI,CAACI,IAAI,CAACU,GAAG,CAAOX,GAAG,EAAEgB,IAAI,CAAC,CAACb,IAAI,CACxCT,gDAAU,CAAEU,KAAwB,IAAI;MACtCC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClB,OAAOT,wCAAE,CAACkB,SAAS,CAAC;IACtB,CAAC,CAAC,CACH;EACH;EAEAI,UAAU;IACR,MAAMjB,GAAG,GAAG,GAAG,IAAI,CAACH,QAAQ,QAAQ;IACpC,OAAO,IAAI,CAACI,IAAI,CAACC,GAAG,CAAQF,GAAG,CAAC;EAClC;EAEAkB,YAAoBjB,IAAgB,EAAUH,WAAwB;IAAlD,SAAI,GAAJG,IAAI;IAAsB,gBAAW,GAAXH,WAAW;EAAgB;;AAlD9DF,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAuB,SAAfvB,eAAe;EAAAwB,YAFd;AAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEPa","sources":["./src/app/services/api/clash-api.service.ts","./src/app/services/api/public_api.ts","./src/app/services/public_api.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Config, Proxies, ProxyProviders, Rules } from '@model';\nimport { HostService } from './host.service';\nimport { catchError, map, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ClashApiService {\n  private get hostname() {\n    return this.hostService.hostname;\n  }\n\n  fetchProxyMap() {\n    const url = `${this.hostname}/proxies`;\n    return this.http.get<Proxies>(url).pipe(\n      catchError((error: HttpErrorResponse) => {\n        console.log(error);\n        return [];\n      })\n    );\n  }\n\n  fetchProvideMap() {\n    const url = `${this.hostname}/providers/proxies`;\n    return this.http.get<ProxyProviders>(url);\n  }\n\n  putProxy(proxyName: string, policyName: string) {\n    const url = `${this.hostname}/proxies/${policyName}`;\n    return this.http.put<null>(url, { name: proxyName }).pipe(\n      catchError((error: HttpErrorResponse) => {\n        console.log(error);\n        return of(undefined);\n      })\n    );\n  }\n\n  fetchConfig() {\n    const url = `${this.hostname}/configs`;\n    return this.http.get<Config>(url);\n  }\n\n  putConfig(body: Partial<Config>) {\n    const url = `${this.hostname}/configs`;\n    return this.http.put<null>(url, body).pipe(\n      catchError((error: HttpErrorResponse) => {\n        console.log(error);\n        return of(undefined);\n      })\n    );\n  }\n\n  fetchRules() {\n    const url = `${this.hostname}/rules`;\n    return this.http.get<Rules>(url);\n  }\n\n  constructor(private http: HttpClient, private hostService: HostService) {}\n}\n","export * from './clash-api.service';\n","export * from './api/public_api';\nexport * from './core'\n"],"names":["catchError","of","ClashApiService","hostname","hostService","fetchProxyMap","url","http","get","pipe","error","console","log","fetchProvideMap","putProxy","proxyName","policyName","put","name","undefined","fetchConfig","putConfig","body","fetchRules","constructor","factory","providedIn"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}