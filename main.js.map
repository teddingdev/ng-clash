{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/interceptors/error-interceptor.ts","./src/app/interceptors/index.ts","./src/app/services/api/host.service.ts","./src/app/services/core/store/store.service.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    redirectTo: 'dashboard',\n    pathMatch: 'full',\n  },\n  {\n    path: 'shared-material',\n    loadChildren: () =>\n      import('./shared/material/material.module').then((m) => m.MaterialModule),\n  },\n  {\n    path: 'dashboard',\n    loadChildren: () =>\n      import('./features/dashboard/dashboard.module').then((m) => m.DashboardModule),\n  },\n  {\n    path: 'unknown',\n    loadChildren: () =>\n      import('./shared/unknown/unknown.module').then((m) => m.UnknownModule),\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  title = '';\n}\n","<router-outlet></router-outlet>\n","import { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { AppRoutingModule } from './app-routing.module';\n\nimport { AppComponent } from './app.component';\nimport { httpInterceptorProviders } from './interceptors';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n  ],\n  providers: [httpInterceptorProviders],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpRequest,\n  HttpInterceptor,\n  HttpErrorResponse,\n} from '@angular/common/http';\n\nimport { Observable, catchError, map, mergeMap, of, throwError } from 'rxjs';\nimport { HostService } from '../services/api/host.service';\n\n/** Pass untouched request through to the next request handler. */\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n  constructor(private hostService: HostService) {}\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return next.handle(req).pipe(\n      map((req) => req),\n      catchError((error) => {\n        console.log(\n          `🍅 -> file: error-interceptor.ts:24 -> ErrorInterceptor -> catchError -> error:`,\n          error\n        );\n        return of();\n      })\n    );\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { ErrorInterceptor } from './error-interceptor';\n\n/** Http interceptor providers in outside-in order */\nexport const httpInterceptorProviders = [\n  { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },\n];\n","import { Injectable } from '@angular/core';\nimport { StoreService } from '../core/store/store.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HostService {\n  private get externalControlConfig() {\n    return this.storeService.externalControlConfig;\n  }\n\n  get host() {\n    return this.externalControlConfig.hostname;\n  }\n\n  get port() {\n    return this.externalControlConfig.port;\n  }\n\n  get hostname() {\n    return `//${this.host}:${this.port}`;\n  }\n\n  constructor(private storeService: StoreService) {}\n}\n","import { Injectable } from '@angular/core';\nimport { ExternalControlConfig } from '@model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StoreService {\n  get externalControlConfig(): ExternalControlConfig {\n    const defaultHostname = location.hostname;\n    const defaultPort = location.port;\n    let cachedHostname: string | undefined;\n    let cachedPort: string | undefined;\n    let cachedKey: string | undefined;\n    const cachedConfig = localStorage.getItem('ngClash');\n    if (cachedConfig) {\n      const ngClashConfig = JSON.parse(cachedConfig);\n      const externalControl = ngClashConfig['externalControl'] ?? {};\n      cachedHostname = externalControl['hostname'];\n      cachedPort = externalControl['port'];\n      cachedKey = externalControl['key'];\n    }\n    return {\n      hostname: cachedHostname ?? defaultHostname,\n      port: cachedPort ?? defaultPort,\n      key: cachedKey ?? '',\n    };\n  }\n\n  set externalControlConfig(externalControl: ExternalControlConfig | null) {\n    if (null) {\n      return;\n    }\n    const cachedConfig = localStorage.getItem('ngClash') ?? '{}';\n    const ngClashConfig = JSON.parse(cachedConfig);\n    ngClashConfig['externalControl'] = externalControl;\n    localStorage.setItem('ngClash', JSON.stringify(ngClashConfig));\n  }\n\n  constructor() {}\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"names":["RouterModule","routes","path","redirectTo","pathMatch","loadChildren","then","m","MaterialModule","DashboardModule","UnknownModule","AppRoutingModule","forRoot","imports","exports","AppComponent","constructor","selectors","decls","vars","template","i0","HttpClientModule","BrowserModule","BrowserAnimationsModule","httpInterceptorProviders","AppModule","bootstrap","declarations","catchError","map","of","ErrorInterceptor","hostService","intercept","req","next","handle","pipe","error","console","log","factory","HTTP_INTERCEPTORS","provide","useClass","multi","HostService","externalControlConfig","storeService","host","hostname","port","providedIn","StoreService","defaultHostname","location","defaultPort","cachedHostname","cachedPort","cachedKey","cachedConfig","localStorage","getItem","ngClashConfig","JSON","parse","externalControl","key","setItem","stringify","environment","production","enableProdMode","__NgCli_bootstrap_1","bootstrapModule","catch","err"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}